<?php
/**
 * ###############################################
 *
 * SWIFT Framework
 * _______________________________________________
 *
 * @author		Varun Shoor
 *
 * @package		SWIFT
 * @copyright	Copyright (c) 2001-2012, Kayako
 * @license		http://www.kayako.com/license
 * @link		http://www.kayako.com
 *
 * ###############################################
 */

$__LANG = array (
	// ======= BEGIN v4 LOCALES =======
	'tickets' => 'Tickets',
	'insertworkflow' => 'Insert Workflow',
	'desc_insertworkflow' => '',
	'tabgeneral' => 'General',
	'tabactions' => 'Actions',
	'workflowtitle' => 'Workflow rule label',
	'desc_workflowtitle' => 'A workflow rule label is displayed (where applicable) in the staff control panel. Clicking the label executes the workflow.',
	'isenabled' => 'Workflow is enabled',
	'desc_isenabled' => 'If a workflow rule is disabled, it will never appear.',
	'insertcriteria' => 'Insert Criteria',
	'sortorder' => 'Display order',
	'desc_sortorder' => 'Workflow rules are displayed according to their display order number, smallest to largest.',
	'editworkflow' => 'Edit Workflow',
	'manageworkflows' => 'Workflows',
	'creationdate' => 'Creation Date',
	'titleworkflowdel' => 'Workflow rules deleted (%d)',
	'msgworkflowdel' => 'The following workflow rules were deleted:',
	'tabnotifications' => 'Notifications',
	'insertnotification' => 'Insert Notification',

	'tabpermissions' => 'Staff Permissions',
	'staffvisibilitycustom' => 'Restrict workflow to specific staff teams',
	'desc_staffvisibilitycustom' =>  'If enabled, this workflow rule will only appear for the teams below (assuming the other criteria are met).',
	'staffgroups' => 'Staff Teams',

	// Actions
	'nochange' => '-- No Change --',
	'actionstaff' => 'Assign the ticket',
	'desc_actionstaff' => 'The ticket will be assigned to this staff user.',
	'actionpriority' => 'Change ticket priority',
	'desc_actionpriority' => 'The ticket will be changed to this priority.',
	'actionticketstatus' => 'Change ticket status',
	'desc_actionticketstatus' => 'The ticket will be changed to this status.',
	'actiondepartment' => 'Move ticket to department',
	'desc_actiondepartment' => 'The ticket will be moved to this department.',
	'actionslaplan' => 'Change ticket SLA plan',
	'desc_actionslaplan' => 'The ticket will be assigned this SLA plan.',
	'actionflagtype' => 'Flag ticket',
	'desc_actionflagtype' => 'The ticket will be flagged this colour.',
	'noplanavailable' => '-- Not Available --',
	'actionnotes' => 'Add a note to ticket',
	'desc_actionnotes' => 'A note will be added to the ticket.',
	'titlenoaction' => 'No actions specified',
	'msgnoaction' => 'At least one action needs to be specified for a workflow rule.',
	'actionaddtags' => 'Add tags to ticket',
	'desc_actionaddtags' => 'These tags will be added to the ticket.',
	'actionremovetags' => 'Remove tags from ticket',
	'desc_actionremovetags' => 'If the ticket has any of these tags, they will be removed.',
	'actiontickettype' => 'Change ticket type',
	'desc_actiontickettype' => 'The ticket type will be changed to the one specified here.',
	'actiontrainbayesian' => 'Train Bayesian',
	'desc_actiontrainbayesian' => 'Assign a Bayesian category to this ticket (which will also train the Bayesian filter for automatic classification in the future).',
	'actiontrash' => 'Move to trash',
	'desc_actiontrash' => 'Move the ticket to trash.',

	'titleinsertworkflow' => 'Workflow rule (%s) created',
	'msginsertworkflow' => 'The workflow rule (%s) was created successfully.',
	'titleupdateworkflow' => 'Workflow rule (%s) updated',
	'msgupdateworkflow' => 'The workflow rule (%s) was updated successfully.',
	'titleworkflowenable' => 'Ticket workflow rules enabled (%d)',
	'msgworkflowenable' => 'The following workflow rules were enabled:',
	'titleworkflowdisable' => 'Ticket workflow rules disabled (%d)',
	'msgworkflowdisable' => 'The following workflow rules were disabled:',

	// ?
	'wfaticketstatus' => 'Change ticket status',
	'wfatickettype' => 'Change ticket type',
	'wfaaddtags' => 'Add tags',
	'wfaremovetags' => 'Remove tags',
	'wfadepartment' => 'Move ticket to department',
	'wfaflag' => 'Flag ticket',
	'wfaddnotes' => 'Add notes',
	'wfapriority' => 'Change ticket priority',
	'wfastaff' => 'Change ticket owner',
	'wfaslaplan' => 'Change SLA plan',
	'wfabayesian' => 'Assign Bayesian category',
	'wfatrash' => 'Move to trash',

	// Criteria
	'wftickettype' => 'Ticket type',
	'desc_wftickettype' => '',
	'wfbayesian' => 'Bayesian category',
	'desc_wfbayesian' => 'Tickets that have been matched to a specific Bayesian category.',
	'wfsubject' => 'Ticket subject',
	'desc_wfsubject' => 'Searches the subject of a ticket.',
	'notapplicable' => '-- Not Available --',
	'wfticketstatus' => 'Ticket status',
	'desc_wfticketstatus' => '',
	'wfticketpriority' => 'Ticket priority',
	'desc_wfticketpriority' => '',
	'wfusergroup' => 'User group',
	'desc_wfusergroup' => '',
	'wfdepartment' => 'Ticket department',
	'desc_wfdepartment' => 'Tickets that belong to a department.',
	'wfowner' => 'Ticket owner',
	'desc_wfowner' => 'Tickets assigned to a particular staff user.',
	'wfunassigned' => '-- Unassigned --',
	'wfactivestaff' => '-- Active Staff --',
	'wfemailqueue' => 'Email queue',
	'desc_wfemailqueue' => 'Tickets that were created or replied to by email via a specific email queue.',
	'wfflagtype' => 'Ticket flag',
	'desc_wfflagtype' => '',
	'wfcreator' => 'Ticket created by',
	'desc_wfcreator' => '',
	'creatorstaff' => 'Staff',
	'creatorclient' => 'Client',
	'wffullname' => 'Recipient\'s name',
	'desc_wffullname' => 'Search the names of recipients participating in a ticket.',
	'wfemail' => 'Recipient\'s email address',
	'desc_wfemail' => 'Search tickets by the recipient\'s email addresses.',
	'wflastreplier' => 'Last replier name',
	'desc_wflastreplier' => 'Search tickets by the name of the last replier.',
	'wfcharset' => 'Character set',
	'desc_wfcharset' => 'Tickets of a particular character set.',
	'wfslaplan' => 'SLA plan',
	'desc_wfslaplan' => 'Tickets that are currently assigned to a particular SLA plan.',
	'wfdate' => 'Ticket creation date',
	'desc_wfdate' => 'Tickets that were created before or after this time.',
	'wfdaterange' => 'Ticket creation date <range>',
	'desc_wfdaterange' => 'Tickets that were created within this time frame.',
	'wflastactivity' => 'Ticket last updated',
	'desc_wflastactivity' => 'Tickets that were updated (i.e. replied to by anyone, or any other update event) before or after this time.',
	'wflastactivityrange' => 'Ticket last updated <range>',
	'desc_wflastactivityrange' => 'Tickets that were updated (i.e. replied to by anyone, or any other update event) within this time frame.',
	'wflaststaffreply' => 'Last reply from staff',
	'desc_wflaststaffreply' => 'Tickets that received a reply from a staff user before or after this time.',
	'wflaststaffreplyrange' => 'Last reply from staff <range>',
	'desc_wflaststaffreplyrange' => 'Tickets that received a reply from a staff user within this time frame.',
	'wflastuserreply' => 'Last reply from user',
	'desc_wflastuserreply' =>  'Tickets that received a reply from a user before or after this time.',
	'wflastuserreplyrange' => 'Last reply from user <range>',
	'desc_wflastuserreplyrange' => 'Tickets that received a reply from a user within this time frame.',
	'wfdue' => 'Reply deadline',
	'desc_wfdue' => 'Tickets that have a reply deadline before or after this time.',
	'wfduerange' => 'Reply deadline <range>',
	'desc_wfduerange' => 'Tickets that have a reply deadline within this time frame.',
	'wfisoverdue' => 'Overdue: Reply overdue',
	'desc_wfisoverdue' => 'Tickets that are overdue (because they were not replied to before the the reply deadline).',
	'wfresolutiondue' => 'Resolution deadline',
	'desc_wfresolutiondue' => 'Tickets that have a resolution deadline before or after this time.',
	'wfresolutionduerange' => 'Resolution due deadline <range>',
	'desc_wfresolutionduerange' =>  'Tickets that have a resolution deadline within this time frame.',
	'wfisresolutionoverdue' => 'Overdue: Resolution overdue',
	'desc_wfisresolutionoverdue' => 'Tickets that are overdue (because they were not resolved before the resolution deadline).',
	'wftemplategroup' => 'Template group',
	'desc_wftemplategroup' => 'Tickets that belong to a particular template group.',
	'wftimeworked' => 'Time worked (minutes)',
	'desc_wftimeworked' => 'Tickets that match this <strong>time worked</strong> value (as part of ticket billing and time tracking entries).',
	'wftotalreplies' => 'Total replies',
	'desc_wftotalreplies' => 'Tickets that have this many replies.',
	'wfpendingfollowups' => 'Pending follow-ups',
	'desc_wfpendingfollowups' => 'Tickets that have ticket follow-ups scheduled.',
	'wfipaddress' => 'IP address',
	'desc_wfipaddress' => 'If a ticket reply has been made from the <strong>support center</strong>, the helpdesk may have logged an IP address for the user.',
	'wfisemailed' => 'Created by email',
	'desc_wfisemailed' => 'Tickets which were created via email.',
	'wfisedited' => 'Has been edited',
	'desc_wfisedited' => 'Tickets that have been edited.',
	'wfhasnotes' => 'Has notes',
	'desc_wfhasnotes' => 'Tickets that have ticket notes.',
	'wfhasattachments' => 'Has attachments',
	'desc_wfhasattachments' => 'Tickets that have file attachments.',
	'wfisescalated' => 'Has been escalated',
	'desc_wfisescalated' => 'Tickets that have been escalated by at least one escalation rule.',
	'wfhasdraft' => 'Has a draft',
	'desc_wfhasdraft' => 'Tickets that have a draft reply saved to them.',
	'wfhasbilling' => 'Has billing and time tracking entries',
	'desc_wfhasbilling' => 'Tickets that have billing and time tracking entries.',
	'wfisphonecall' => 'Is a phone ticket',
	'desc_wfisphonecall' => 'Tickets that has been marked as a <em>phone call</em> type ticket.',

	// Potentialy unused phrases in admin_workflows.php
	'triggerevent' => 'Trigger Event',
	'desc_triggerevent' => 'Select the event that triggers this Workflow rule',
	'smatchtype' => 'Match Type',
	'matchtype' => 'Criteria Options',
	'desc_matchtype' => 'Select the grouping method for the criteria fields.',
	'smatchall' => 'Match All (AND)',
	'smatchany' => 'Match Any (OR)',
	'desc_editworkflow' => '',
	'invalidworkflowrule' => 'Invalid Workflow Rule. Please make sure the record exists in the database.',
	'desc_manageworkflows' => '',
	'desc_tickettype' => '',
	'desc_trainbayesian' => '',
	'tecron' => 'Scheduled Task (Recurring automatic execution)',
	'desc_tecron' => 'This event is triggered whenever a scheduled task is executed. Usually every 3-5 minutes depending upon pseudo/manual cron execution.',
	'teticketcreation' => 'Ticket Creation',
	'desc_teticketcreation' => 'This event is triggered whenever a new ticket is created',
	'teslaplan' => 'SLA Plan Change',
	'desc_teslaplan' => 'This event is triggered whenever a SLA Plan is changed for a ticket',
	'teflag' => 'Flag Change',
	'desc_teflag' => 'This event is triggered on change of the flag type on a ticket',
	'temarkdue' => 'Ticket Marked Due',
	'desc_temarkdue' => 'This event is triggered whenever a ticket is marked as due',
	'teaddrecipients' => 'Recipients Addition',
	'desc_teaddrecipients' => 'This event is triggered whener a recipient is added for a ticket',
	'teupdateproperties' => 'Update Properties',
	'desc_teupdateproperties' => 'This event is triggered on update of ticket properties',
	'testaffreply' => 'Staff Reply',
	'desc_testaffreply' => 'This event is triggered whenever a staff replies to a ticket',
	'teuserreply' => 'User Reply',
	'desc_teuserreply' => 'This event is triggered whenever a user replies to a ticket',
	'teticketnote' => 'Ticket Note',
	'desc_teticketnote' => 'This event is triggered whenever a note is added to a ticket',
	'techangepriority' => 'Priority Change',
	'desc_techangepriority' => 'This event is triggered whenever a priority is changed for a ticket',
	'techangestatus' => 'Status Change',
	'desc_techangestatus' => 'This event is triggered whenever a status is changed for a ticket',
	'teassignticket' => 'Assign Ticket',
	'desc_teassignticket' => 'This event is triggered whenever a ticket is assigned to a staff',
	'temoveticket' => 'Move Ticket',
	'desc_temoveticket' => 'This event is triggered whenever a ticket is moved to a new department',
	'teforwardticket' => 'Ticket Forward',
	'desc_teforwardticket' => 'This event is triggered whenever a ticket is forwarded to a third party',
	'tesavedraft' => 'Save as Draft',
	'desc_tesavedraft' => 'This event is triggered whenever a ticket is saved as draft',
	'teescalateticket' => 'Ticket Escalated',
	'desc_teescalateticket' => 'This event is triggered whenever a ticket is escalated',
	'tetimeworked' => 'Time Worked',
	'desc_timeworked' => 'This event is triggered whenever a time worked entry is added for a ticket',
	'teticketpost' => 'Ticket Post Updated',
	'desc_teticketpost' => 'This event is triggered whenever a ticket post is updated by a staff',
	'teaddlabel' => 'Label',
	'desc_teaddlabel' => 'This event is triggered whenever a label is added for a ticket',
	'wfislabeled' => 'Is Labeled',
	'desc_wfislabeled' => '',
);
?>